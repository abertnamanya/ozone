<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>com.ozonehis</groupId>
    <artifactId>maven-commons</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>maven-commons</relativePath>
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <artifactId>ozone</artifactId>
  <name>Ozone</name>
  <description>The enterprise-grade health information system built with OpenMRS 3</description>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <organization>
    <name>Ozone HIS</name>
    <url>https://www.ozone-his.com</url>
  </organization>
  <developers>
    <developer>
      <name>Mekom Solutions</name>
      <url>https://www.mekomsolutions.com</url>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Dependency versions -->
    <ozoneDistroVersion>1.0.0-SNAPSHOT</ozoneDistroVersion>
    <ozoneDockerComposeVersion>1.0.0-SNAPSHOT</ozoneDockerComposeVersion>

    <!-- Classifier for the dependency report artifact -->
    <dependencyReportClassifier>dependencies</dependencyReportClassifier>
    <true>true</true>
  </properties>

  <modules>
    <module>maven-commons</module>
    <module>maven-parent</module>
    <module>scripts</module>
    <module>distro</module>
    <module>maven-archetype</module>
  </modules>

  <dependencies>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>ozone-distro</artifactId>
      <type>zip</type>
      <version>${ozoneDistroVersion}</version>
    </dependency>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>ozone-docker-compose</artifactId>
      <type>zip</type>
      <version>${ozoneDockerComposeVersion}</version>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>docker</id>
      <properties>
        <!-- Docker image properties-->
        <docker.repo.name>ozone-embedded</docker.repo.name>
        <docker.repo>mekomsolutions</docker.repo>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>Unpack Ozone Docker Embedded to a tempoarary location</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <excludeTransitive>true</excludeTransitive>
                  <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded</outputDirectory>
                  <includeArtifactIds>ozone-docker-embedded</includeArtifactIds>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmavenplus</groupId>
            <artifactId>gmavenplus-plugin</artifactId>
            <executions>
              <execution>
                <id>Generate Docker Compose Embedded yaml</id>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>process-resources</phase>
                <configuration>
                  <scripts>
                    <script>
                      file://${project.basedir}/scripts/openmrs/docker-embedded/generate-docker-embedded-compose.groovy</script>
                  </scripts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <name>mekomsolutions/ozone-embedded-openmrs-3-backend:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-openmrs-3-frontend:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/frontend/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-odoo:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/odoo/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-senaite:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/senaite/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-erpnext:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/erpnext/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-eip-erpnext-openmrs:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/eip-erpnext-openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-eip-odoo-openmrs:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/eip-odoo-openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-eip-openmrs-senaite:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/eip-openmrs-senaite/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-postgresql:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/postgresql/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>mekomsolutions/ozone-embedded-mysql:${project.version}</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded/mysql/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/distro</contextDir>
                  </build>
                </image>
              </images>
              <buildx>
                <platforms>
                  <platform>linux/amd64</platform>
                  <platform>linux/arm64</platform>
                </platforms>
              </buildx>
            </configuration>
            <executions>
              <execution>
                <id>Build embedded docker images</id>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <!-- Copy Docker Embedded compose file to run directory -->
                <id>Copy Docker Embedded compose file</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>
                        ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>docker-compose-embedded.yaml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>com.ozonehis</groupId>
          <artifactId>ozone-docker-embedded</artifactId>
          <type>zip</type>
          <version>1.0.0-SNAPSHOT</version>
        </dependency>
      </dependencies>
    </profile>
  </profiles>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>Copy Ozone Docker Compose</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</outputDirectory>
              <includeArtifactIds>ozone-docker-compose</includeArtifactIds>
            </configuration>
          </execution>

          <execution>
            <id>Copy Ozone Distro</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro</outputDirectory>
              <includeArtifactIds>ozone-distro</includeArtifactIds>
            </configuration>
          </execution>

          <!-- <execution>
            <id>Copy Ozone Docker Embedded Files</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/docker-embedded</outputDirectory>
              <includeArtifactIds>ozone-docker-embedded</includeArtifactIds>
            </configuration>
          </execution> -->

        </executions>
      </plugin>

      <plugin>
        <artifactId>exec-maven-plugin</artifactId>
        <groupId>org.codehaus.mojo</groupId>
        <executions>
          <execution><!-- Replace the Ozone Dir value in order for start-demo.sh to work -->
            <id>Set OZONE_DIR (needed by start-demo.sh)</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${project.build.directory}/set-ozone-dir.sh</executable>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- Copy and substitute some helper files (for demo and Gitpod) -->
            <id>Copy and substitute some helper files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>*.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Compile a dependency report -->
      <plugin>
        <groupId>net.mekomsolutions.maven.plugin</groupId>
        <artifactId>dependency-tracker-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Compile dependency report</id>
            <phase>compile</phase>
            <goals>
              <goal>track</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Attach the dependency report to the build -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>

          <execution>
            <id>Attach the dependency report</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>
                    ${project.build.directory}/${project.artifactId}-${project.version}-dependencies.txt</file>
                  <type>txt</type>
                  <classifier>${dependencyReportClassifier}</classifier>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- packaging the distro as a installable/deployable file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>Package Ozone Artifact</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <pluginRepositories>
    <pluginRepository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </pluginRepository>
  </pluginRepositories>
</project>